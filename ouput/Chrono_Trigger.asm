; SNES ROM Disassembly
; Generated by SNES Disassembler - WLA-DX Format
; Title: CHRONO TRIGGER       
; Map Mode: HiROM
; ROM Size: 4096 KB
; Reset Vector: $00FFFF
; Special Chip: Possible enhancement chips
; Generated: 2025-07-27T13:38:00.758Z

; WLA-DX Assembler Configuration
.MEMORYMAP
SLOTSIZE $10000        ; 64KB slots
DEFAULTSLOT 0
SLOT 0 $0000           ; Bank 0 at $0000-$FFFF
.ENDME

.ROMBANKSIZE $8000      ; 32KB ROM banks
.ROMBANKS 32           ; Number of ROM banks

.SNESHEADER
NAME "CHRONO TRIGGER       "
LOROM                  ; LoROM mapping
SLOWROM                ; SlowROM timing
CARTRIDGETYPE $00      ; ROM only
ROMSIZE $08            ; 2 Mbit
SRAMSIZE $00           ; No SRAM
COUNTRY $01            ; NTSC
LICENSEECODE $00
VERSION $00
.ENDSNES

.BANK 0 SLOT 0
.ORG $0000

leveldata_FFFF:
    PLB                  ; PLB - Pull Data Bank Register (4 cycles) [N,Z]
leveldata_10000:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_10001:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10002:
    ADC $7C             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10004:
    STA $AD             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10006:
    LDA $6C             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10008:
    STA $E1             ; STA - Store Accumulator in Memory (3 cycles)
    LDA $6E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $E3                              ; STA - Store Accumulator in Memory (3 cycles)
    PLY                                  ; PLY - Pull Index Y (4 cycles) [N,Z]
    LDA $99                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
spritedata_10011:
    CLC                ; CLC - Clear Carry Flag (2 cycles) [C]
spritedata_10012:
    ADC #$20           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    AND #$3F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    JSR $8218                            ; JSR - Jump to Subroutine (6 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $7C                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $B1                              ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10020:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_10021:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10022:
    ADC $7C             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10024:
    STA $AF             ; STA - Store Accumulator in Memory (3 cycles)
    LDA $9C                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    AND #$1F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    TAY                                  ; TAY - Transfer Accumulator to Index Y (2 cycles) [N,Z]
    LDA $9B                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    AND #$3F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    PHA                                  ; PHA - Push Accumulator (3 cycles)
    JSR $813D                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10036:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_10037:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10038:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_1003A:
    STA $B3             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1003C:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_1003D:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_1003E:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10040:
    STA $B5             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10042:
    LDA $5E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10044:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10045:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10047:
    STA $B7             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10049:
    LDA $6C             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_1004B:
    STA $E5             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1004D:
    LDA $6E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $E7                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $6A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $E9                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $9C                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
spritedata_10057:
    CLC                ; CLC - Clear Carry Flag (2 cycles) [C]
spritedata_10058:
    ADC #$1C           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    AND #$1F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    TAY                                  ; TAY - Transfer Accumulator to Index Y (2 cycles) [N,Z]
    PLA                                  ; PLA - Pull Accumulator (4 cycles) [N,Z]
    JSR $81A1                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10063:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10064:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10066:
    STA $BB             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10068:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_10069:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_1006A:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_1006C:
    STA $B9             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1006E:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_1006F:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10070:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10072:
    STA $BD             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10074:
    LDA $9C             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10076:
    DEC                 ; DEC - Decrement Accumulator (2 cycles) [N,Z]
leveldata_10077:
    AND #$1F            ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    PHA                                  ; PHA - Push Accumulator (3 cycles)
leveldata_1007B:
    TAY                 ; TAY - Transfer Accumulator to Index Y (2 cycles) [N,Z]
leveldata_1007C:
    LDA $9B             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_1007E:
    AND #$3F            ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    JSR $81D6                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10084:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_10085:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10086:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10088:
    STA $BF             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1008A:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_1008B:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_1008C:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_1008E:
    STA $C1             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10090:
    LDA $6C             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10092:
    STA $EB             ; STA - Store Accumulator in Memory (3 cycles)
    LDA $6E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $ED                              ; STA - Store Accumulator in Memory (3 cycles)
    PLY                                  ; PLY - Pull Index Y (4 cycles) [N,Z]
    LDA $9B                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
spritedata_1009B:
    CLC                ; CLC - Clear Carry Flag (2 cycles) [C]
spritedata_1009C:
    ADC #$20           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    AND #$3F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    JSR $8218                            ; JSR - Jump to Subroutine (6 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $7E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $C5                              ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100AA:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_100AB:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100AC:
    ADC $7E             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100AE:
    STA $C3             ; STA - Store Accumulator in Memory (3 cycles)
    LDA $9E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    AND #$1F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    TAY                                  ; TAY - Transfer Accumulator to Index Y (2 cycles) [N,Z]
    LDA $9D                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    AND #$3F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    PHA                                  ; PHA - Push Accumulator (3 cycles)
    JSR $813D                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_100C0:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_100C1:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100C2:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100C4:
    STA $C7             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100C6:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_100C7:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100C8:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100CA:
    STA $C9             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100CC:
    LDA $5E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_100CE:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100CF:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100D1:
    STA $CB             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100D3:
    LDA $6C             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_100D5:
    STA $EF             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100D7:
    LDA $6E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $F1                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $6A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $F3                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $9E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
spritedata_100E1:
    CLC                ; CLC - Clear Carry Flag (2 cycles) [C]
spritedata_100E2:
    ADC #$1C           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    AND #$1F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    TAY                                  ; TAY - Transfer Accumulator to Index Y (2 cycles) [N,Z]
    PLA                                  ; PLA - Pull Accumulator (4 cycles) [N,Z]
    JSR $81A1                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_100ED:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100EE:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100F0:
    STA $CF             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100F2:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_100F3:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100F4:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100F6:
    STA $CD             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100F8:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_100F9:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_100FA:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_100FC:
    STA $D1             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_100FE:
    LDA $9E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10100:
    DEC                 ; DEC - Decrement Accumulator (2 cycles) [N,Z]
leveldata_10101:
    AND #$1F            ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    PHA                                  ; PHA - Push Accumulator (3 cycles)
leveldata_10105:
    TAY                 ; TAY - Transfer Accumulator to Index Y (2 cycles) [N,Z]
leveldata_10106:
    LDA $9D             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10108:
    AND #$3F            ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    JSR $81D6                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_1010E:
    TXA                 ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
leveldata_1010F:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10110:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10112:
    STA $D3             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10114:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_10115:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10116:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10118:
    STA $D5             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1011A:
    LDA $6C             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_1011C:
    STA $F5             ; STA - Store Accumulator in Memory (3 cycles)
    LDA $6E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $F7                              ; STA - Store Accumulator in Memory (3 cycles)
    PLY                                  ; PLY - Pull Index Y (4 cycles) [N,Z]
    LDA $9D                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
spritedata_10125:
    CLC                ; CLC - Clear Carry Flag (2 cycles) [C]
spritedata_10126:
    ADC #$20           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    AND #$3F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    JSR $8218                            ; JSR - Jump to Subroutine (6 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $80                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $D9                              ; STA - Store Accumulator in Memory (3 cycles)
    TXA                                  ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10136:
    ADC $80             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10138:
    STA $D7             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1013A:
    SEP #$20            ; SEP - Set Processor Status Bits (3 cycles) [All]
leveldata_1013C:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_1013D:
    STA $62             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1013F:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_10140:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10141:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10142:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10143:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10144:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10145:
    STA $52             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10147:
    LDA $62             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10149:
    CMP #$20            ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
leveldata_1014B:
    BRK $B0             ; BRK - Software Break (7 cycles) [B,I]
leveldata_1014D:
    ORA $18             ; ORA - OR Accumulator with Memory (4 cycles) [N,Z]
leveldata_1014F:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10151:
    TAX                 ; TAX - Transfer Accumulator to Index X (2 cycles) [N,Z]
leveldata_10152:
    LDA $52             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10154:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10155:
    ADC #$00            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_10157:
    TSB $A8             ; TSB - Test and Set Bits (5 cycles) [Z]
leveldata_10159:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1015B:
    BRK $38             ; BRK - Software Break (7 cycles) [B,I]
leveldata_1015D:
    SBC $62             ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
leveldata_1015F:
    STA $6C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10161:
    BRA $179            ; BRA - Branch Always (3 cycles)
leveldata_10163:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10164:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10166:
    BRK $18             ; BRK - Software Break (7 cycles) [B,I]
leveldata_10168:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_1016A:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_1016B:
    ADC #$00            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_1016D:
    TSB $AA             ; TSB - Test and Set Bits (5 cycles) [Z]
leveldata_1016F:
    LDY $52             ; LDY - Load Index Y with Memory (3 cycles) [N,Z]
leveldata_10171:
    LDA #$40            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10173:
    BRK $38             ; BRK - Software Break (7 cycles) [B,I]
leveldata_10175:
    SBC $62             ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $6C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$22                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    BRK $38                              ; BRK - Software Break (7 cycles) [B,I]
    SBC $6C                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    CMP #$21                             ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
    BRK $90                              ; BRK - Software Break (7 cycles) [B,I]
    ORA $A9                              ; ORA - OR Accumulator with Memory (4 cycles) [N,Z]
    JSR $0A00                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10188:
    STA $6E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1018A:
    ASL $6C             ; ASL - Arithmetic Shift Left (5 cycles) [N,Z,C]
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    BRK $85                              ; BRK - Software Break (7 cycles) [B,I]
    ROR                                  ; ROR - Rotate Right (2 cycles) [N,Z,C]
    TXA                                  ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$1F                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    BRK $85                              ; BRK - Software Break (7 cycles) [B,I]
    LSR $A60                             ; LSR - Logical Shift Right (7 cycles) [N,Z,C]
leveldata_1019A:
    STA $6E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1019C:
    ASL $6C             ; ASL - Arithmetic Shift Left (5 cycles) [N,Z,C]
leveldata_1019E:
    STZ $6A             ; STZ - Store Zero in Memory (3 cycles)
leveldata_101A0:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_101A1:
    STA $62             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_101A3:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_101A4:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101A5:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101A6:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101A7:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101A8:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101A9:
    STA $52             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_101AB:
    LDA $62             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_101AD:
    CMP #$20            ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
leveldata_101AF:
    BRK $B0             ; BRK - Software Break (7 cycles) [B,I]
leveldata_101B1:
    BPL $1CB            ; BPL - Branch if Plus (Negative Clear) (2 cycles)
leveldata_101B3:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_101B5:
    TAX                 ; TAX - Transfer Accumulator to Index X (2 cycles) [N,Z]
leveldata_101B6:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_101B7:
    SBC #$1F            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_101B9:
    BRK $A8             ; BRK - Software Break (7 cycles) [B,I]
leveldata_101BB:
    LDA $52             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_101BD:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_101BE:
    ADC #$00            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_101C0:
    TSB $60             ; TSB - Test and Set Bits (5 cycles) [Z]
leveldata_101C2:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_101C3:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_101C5:
    BRK $18             ; BRK - Software Break (7 cycles) [B,I]
leveldata_101C7:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_101C9:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_101CA:
    ADC #$00            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_101CC:
    TSB $AA             ; TSB - Test and Set Bits (5 cycles) [Z]
leveldata_101CE:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_101CF:
    SBC #$1F            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_101D1:
    BRK $A8             ; BRK - Software Break (7 cycles) [B,I]
leveldata_101D3:
    LDA $52             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_101D5:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_101D6:
    STA $62             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_101D8:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_101D9:
    STA $64             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_101DB:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101DC:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101DD:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101DE:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101DF:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_101E0:
    STA $52             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_101E2:
    LDA $62             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_101E4:
    CMP #$20            ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
leveldata_101E6:
    BRK $B0             ; BRK - Software Break (7 cycles) [B,I]
leveldata_101E8:
    PHP                 ; PHP - Push Processor Status (3 cycles)
leveldata_101E9:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_101EA:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_101EC:
    TAX                 ; TAX - Transfer Accumulator to Index X (2 cycles) [N,Z]
leveldata_101ED:
    LDY $62             ; LDY - Load Index Y with Memory (3 cycles) [N,Z]
leveldata_101EF:
    BRA $204            ; BRA - Branch Always (3 cycles)
leveldata_101F1:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_101F2:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_101F4:
    BRK $18             ; BRK - Software Break (7 cycles) [B,I]
leveldata_101F6:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_101F8:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_101F9:
    ADC #$00            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_101FB:
    TSB $AA             ; TSB - Test and Set Bits (5 cycles) [Z]
leveldata_101FD:
    LDA $62             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_101FF:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10200:
    ADC #$E0            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_10202:
    ORA $A8             ; ORA - OR Accumulator with Stack Relative (4 cycles) [N,Z]
leveldata_10204:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10206:
    BRK $38             ; BRK - Software Break (7 cycles) [B,I]
leveldata_10208:
    SBC $64             ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
leveldata_1020A:
    STA $6C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1020C:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1020E:
    BRK $38             ; BRK - Software Break (7 cycles) [B,I]
leveldata_10210:
    SBC $6C             ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
leveldata_10212:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10213:
    STA $6E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10215:
    ASL $6C             ; ASL - Arithmetic Shift Left (5 cycles) [N,Z,C]
leveldata_10217:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_10218:
    STA $62             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1021A:
    TYA                 ; TYA - Transfer Index Y to Accumulator (2 cycles) [N,Z]
leveldata_1021B:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_1021C:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_1021D:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_1021E:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_1021F:
    ASL                 ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
leveldata_10220:
    STA $52             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10222:
    LDA $62             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10224:
    CMP #$20            ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
leveldata_10226:
    BRK $B0             ; BRK - Software Break (7 cycles) [B,I]
leveldata_10228:
    ORA $18
leveldata_1022A:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_1022C:
    TAX                 ; TAX - Transfer Accumulator to Index X (2 cycles) [N,Z]
leveldata_1022D:
    LDA $62             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_1022F:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_10230:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10231:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10233:
    BRK $18             ; BRK - Software Break (7 cycles) [B,I]
leveldata_10235:
    ADC $52             ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
leveldata_10237:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10238:
    ADC #$00            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    TSB $AA                              ; TSB - Test and Set Bits (5 cycles) [Z]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$E0                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ORA $60                              ; ORA - OR Accumulator with Stack Relative (4 cycles) [N,Z]
    LDX #$C800                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $10                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7612                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_1025E:
    LDA #$01            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $78                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10263:
    LDX #$D000           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $10                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $79CF                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $78                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10285:
    LDX #$D000           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $12                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $18                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $79CF                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $78                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_102A5:
    LDX #$D800           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $10                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7D66                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$04                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $78                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_102C5:
    LDX #$C800           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7612                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$01                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $79                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_102E5:
    LDX #$D000           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $79CF                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $79                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10305:
    LDX #$D000           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $12                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $16                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $79CF                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $79                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10325:
    LDX #$D800           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$12                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7D66                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$04                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $79                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10345:
    LDX #$C880           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0C                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $77E4                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$01                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7A                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10365:
    LDX #$D080           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0C                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7BA9                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7A                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10385:
    LDX #$D080           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $14                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $16                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7BA9                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7A                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_103A5:
    LDX #$D880           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0C                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7E60                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$04                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7A                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_103C5:
    LDX #$C880           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $77E4                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$01                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7B                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_103E5:
    LDX #$D080           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7BA9                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7B                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10405:
    LDX #$D080           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $12                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $16                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7BA9                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$02                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7B                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10425:
    LDX #$D880           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $2181                            ; STX - Store Index X in Memory (4 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2183                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA $0A                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $58                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$0F                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $5C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $0E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    STA $5A                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $7E60                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$04                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TSB $7B                              ; TSB - Test and Set Bits (5 cycles) [Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10445:
    LDX $DB              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $460                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $A5                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$C800                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $DD                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $482                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DD                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $A7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$C800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $DF                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $4A6                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $A9                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $DD                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$C800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_104A7:
    LDA #$80             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2115                            ; STA - Store Accumulator in Memory (4 cycles) | VMAIN - Video Port Control (write-only) [Bit 7: Increment on high byte]
    LDA #$01                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $4370                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA #$18                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $4371                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA #$7E                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $4374                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA #$80                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $420B                            ; STA - Store Accumulator in Memory (4 cycles) | MDMAEN - General Purpose DMA Enable (write-only)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_104C1:
    LDX $E5              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $4DC                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $B9                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D000                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $E7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $4FE                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E7                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $BB                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D000                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $E9                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $522                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E9                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $BD                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $E7                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$D000                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10523:
    LDX $EF              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $53E                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $CD                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D800                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $F1                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $560                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $F1                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $CF                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $F3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $584                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $F3                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $D1                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $F1                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$D800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10585:
    LDX $DB              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $5A0                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $9F                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$C800                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $DD                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $5C2                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DD                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $A1                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$C800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $DF                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $5E6                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $A3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $DB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $DD                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$C800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_105E7:
    LDX $E5              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $602                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $B3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D000                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $E7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $624                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E7                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $B5                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D000                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $E9                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $648                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E9                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $B7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $E7                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$D000                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10649:
    LDX $EF              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $664                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $C7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D800                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $F1                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $686                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $F1                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $C9                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $F3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $6AA                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $F3                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $4375                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $CB                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EF                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $F1                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$D800                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $84A7                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_106AB:
    LDX $E1              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $6C0                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $AF                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$C880                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $E3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $6DC                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $B1                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E1                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$C880                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_106DD:
    LDA #$81             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2115                            ; STA - Store Accumulator in Memory (4 cycles) | VMAIN - Video Port Control (write-only) [Bit 7: Increment on high byte]
    LDA #$01                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $4370                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA #$18                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $4371                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA #$7E                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $4374                            ; STA - Store Accumulator in Memory (4 cycles)
    LDA #$80                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $420B                            ; STA - Store Accumulator in Memory (4 cycles) | MDMAEN - General Purpose DMA Enable (write-only)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_106F7:
    LDX $EB              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $70C                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $C3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D080                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $ED                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $728                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $C5                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D080                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10729:
    LDX $F5              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $73E                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $D7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D880                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $F7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $75A                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $D9                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $F5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D880                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_1075B:
    LDX $E1              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $770                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $AB                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$C880                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $E3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $78C                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $AD                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $E1                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$C880                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_1078D:
    LDX $EB              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $7A2                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $BF                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D080                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $ED                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $7BE                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $C1                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $EB                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D080                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_107BF:
    LDX $F5              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $7D4                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $D3                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    LDX #$D880                           ; LDX - Load Index X with Memory (2 cycles) [N,Z]
    STX $4372                            ; STX - Store Index X in Memory (4 cycles)
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    LDX $F7                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    BEQ $7F0                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STX $4375                            ; STX - Store Index X in Memory (4 cycles)
    LDX $D5                              ; LDX - Load Index X with Memory (3 cycles) [N,Z]
    STX $2116                            ; STX - Store Index X in Memory (4 cycles) | VMADDL - VRAM Address Register (Low) (write-only)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $F5                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$D880                           ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $4372                            ; STA - Store Accumulator in Memory (4 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $86DD                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_107F1:
    PHD                  ; PHD - Push Direct Page Register (4 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$1D00                           ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TCD                                  ; TCD - Transfer 16-bit Accumulator to Direct Page Register (2 cycles) [N,Z]
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $8345                            ; JSR - Jump to Subroutine (6 cycles)
    LDA $35                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BIT #$02                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BNE $810                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    LDA $0BC9                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    BPL $80D                             ; BPL - Branch if Plus (Negative Clear) (2 cycles)
    JSR $8385                            ; JSR - Jump to Subroutine (6 cycles)
    BRA $810                             ; BRA - Branch Always (3 cycles)
function_1080D:
    JSR $8365            ; JSR - Jump to Subroutine (6 cycles)
    LDA $35                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BIT #$04                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BNE $819                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    JSR $83A5                            ; JSR - Jump to Subroutine (6 cycles)
    JSR $7F9A                            ; JSR - Jump to Subroutine (6 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_1081E:
    LDA #$80             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $01EB                            ; STA - Store Accumulator in Memory (4 cycles)
    PHD                                  ; PHD - Push Direct Page Register (4 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$1D00                           ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TCD                                  ; TCD - Transfer 16-bit Accumulator to Direct Page Register (2 cycles) [N,Z]
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $88E5                            ; JSR - Jump to Subroutine (6 cycles)
    STZ $2C                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $2D                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $0162                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    BNE $840                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    LDA $011F                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    BEQ $840                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    JSR $88EE                            ; JSR - Jump to Subroutine (6 cycles)
    LDA $0120                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    BEQ $84C                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    SEP #$10                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $8A6D                            ; JSR - Jump to Subroutine (6 cycles)
    REP #$10                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    JSR $9175                            ; JSR - Jump to Subroutine (6 cycles)
    JSR $99DE                            ; JSR - Jump to Subroutine (6 cycles)
    JSR $91AC                            ; JSR - Jump to Subroutine (6 cycles)
    JSR $93E1                            ; JSR - Jump to Subroutine (6 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_1085A:
    PHD                  ; PHD - Push Direct Page Register (4 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$1D00                           ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    TCD                                  ; TCD - Transfer 16-bit Accumulator to Direct Page Register (2 cycles) [N,Z]
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDA $0138                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    BNE $86A                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_1086A:
    DEC                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    BEQ $875                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    DEC                                  ; DEC - Decrement Accumulator (2 cycles) [N,Z]
    BEQ $8C4                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    STZ $0138                            ; STZ - Store Zero in Memory (4 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10875:
    STZ $2E              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $32                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $33                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$10                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    LDA $93                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BEQ $897                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    LDA $A00                             ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10889:
    CMP #$80            ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
leveldata_1088B:
    BCC $893            ; BCC - Branch if Carry Clear (2 cycles)
leveldata_1088D:
    LDA #$10            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1088F:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10891:
    BRA $897            ; BRA - Branch Always (3 cycles)
function_10893:
    LDA #$F0             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $96                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BNE $8A6                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    LDA $93                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BNE $8B7                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$10                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $0138                            ; STZ - Store Zero in Memory (4 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_108A6:
    LDA $A80             ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_108A9:
    CMP #$88            ; CMP - Compare Accumulator with Memory (2 cycles) [N,Z,C]
    BCC $8B3                             ; BCC - Branch if Carry Clear (2 cycles)
    LDA #$10                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    BRA $8B7                             ; BRA - Branch Always (3 cycles)
function_108B3:
    LDA #$F0             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    REP #$10                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    JSR $91AC                            ; JSR - Jump to Subroutine (6 cycles)
    JSR $93E1                            ; JSR - Jump to Subroutine (6 cycles)
    INC $0138                            ; INC - Increment Memory (6 cycles) [N,Z]
leveldata_108C2:
    PLD                 ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
leveldata_108C3:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_108C4:
    STZ $32             ; STZ - Store Zero in Memory (3 cycles)
leveldata_108C6:
    STZ $33             ; STZ - Store Zero in Memory (3 cycles)
leveldata_108C8:
    LDA $93             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BNE $8CE                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $96                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BNE $8DD                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $93                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BNE $8DD                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    STZ $0138                            ; STZ - Store Zero in Memory (4 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_108DD:
    JSR $91AC            ; JSR - Jump to Subroutine (6 cycles)
    JSR $93E1                            ; JSR - Jump to Subroutine (6 cycles)
    PLD                                  ; PLD - Pull Direct Page Register (5 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_108E5:
    LDA $2A              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $2B                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_108EE:
    LDA $0138            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    BNE $901                             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    LDA $00F9                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    AND #$0F                             ; AND - AND Accumulator with Memory (2 cycles) [N,Z]
    ASL                                  ; ASL - Arithmetic Shift Left (2 cycles) [N,Z,C]
    SEP #$10                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    TAX                                  ; TAX - Transfer Accumulator to Index X (2 cycles) [N,Z]
    JSR $8902                            ; JSR - Jump to Subroutine Indexed Indirect (8 cycles)
    REP #$10                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10902:
    BIT $89              ; BIT - Test Bits (3 cycles) [N,V,Z]
    AND $89                              ; AND - AND Accumulator with Memory (3 cycles) [N,Z]
    MVP $2489                            ; MVP - Block Move Previous (7 cycles)
    BIT #$82                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$A1                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$D2                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$24                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$63                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$07                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    TXA                                  ; TXA - Transfer Index X to Accumulator (2 cycles) [N,Z]
    BIT $248A                            ; BIT - Test Bits (4 cycles) [N,V,Z]
    BIT #$24                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$24                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$24                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$24                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$24                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    BIT #$60                             ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
    LDA $00F8                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10928:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_1092A:
    BEQ $938            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_1092C:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1092E:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10930:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10932:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10933:
    ADC #$20            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_10935:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10937:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
function_10938:
    LDA #$10             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $2E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$10                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10944:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10947:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_10949:
    BEQ $957            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_1094B:
    LDA #$E0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1094D:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1094F:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10951:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10952:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10954:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10956:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
function_10957:
    LDA #$F0             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2C                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $2E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$10                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10963:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10966:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_10968:
    BEQ $976            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_1096A:
    LDA #$E0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1096C:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1096E:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10970:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10971:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10973:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10975:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
function_10976:
    LDA #$F0             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2D                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $30                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$10                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10982:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10985:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_10987:
    BEQ $995            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_10989:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_1098B:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_1098D:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_1098F:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10990:
    ADC #$20            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_10992:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10994:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
function_10995:
    LDA #$10             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2D                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $30                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$10                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_109A1:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_109A4:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_109A6:
    BEQ $9BD            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_109A8:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_109AA:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109AC:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109AE:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_109B0:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_109B1:
    ADC #$20            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_109B3:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109B5:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_109B7:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_109B8:
    ADC #$20            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_109BA:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109BC:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_109BD:
    LDA #$10            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_109BF:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109C1:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109C3:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_109C5:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$10                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $30                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$10                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_109D2:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_109D5:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_109D7:
    BEQ $9F0            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_109D9:
    LDA #$E0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_109DB:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109DD:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_109DF:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_109E0:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_109E2:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109E4:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_109E6:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109E8:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_109EA:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_109EB:
    ADC #$20            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_109ED:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109EF:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_109F0:
    LDA #$F0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_109F2:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_109F4:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_109F6:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_109F7:
    SBC #$10            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_109F9:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$10                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2D                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $30                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$10                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10A07:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10A0A:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_10A0C:
    BEQ $A25            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_10A0E:
    LDA #$20            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10A10:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A12:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A14:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10A15:
    ADC #$20            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_10A17:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A19:
    LDA #$E0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10A1B:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A1D:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A1F:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10A20:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10A22:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A24:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_10A25:
    LDA #$10            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10A27:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A29:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A2B:
    CLC                 ; CLC - Clear Carry Flag (2 cycles) [C]
leveldata_10A2C:
    ADC #$10            ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
leveldata_10A2E:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
    LDA #$F0                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2D                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $30                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$10                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10A3C:
    LDA $00F8            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
leveldata_10A3F:
    BIT #$02            ; BIT - Test Bits (Immediate mode only affects Z) (2 cycles) [Z]
leveldata_10A41:
    BEQ $A58            ; BEQ - Branch if Equal (Zero Set) (2 cycles)
leveldata_10A43:
    LDA #$E0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10A45:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A47:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A49:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A4B:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10A4C:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10A4E:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A50:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A52:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10A53:
    SBC #$20            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10A55:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A57:
    RTS                 ; RTS - Return from Subroutine (6 cycles)
leveldata_10A58:
    LDA #$F0            ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
leveldata_10A5A:
    STA $2C             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A5C:
    STA $2D             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A5E:
    LDA $2E             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A60:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10A61:
    SBC #$10            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10A63:
    STA $2E             ; STA - Store Accumulator in Memory (3 cycles)
leveldata_10A65:
    LDA $30             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10A67:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
leveldata_10A68:
    SBC #$10            ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
leveldata_10A6A:
    STA $30             ; STA - Store Accumulator in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10A6D:
    LDA $30              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BEQ $A82                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    BMI $A8F                             ; BMI - Branch if Minus (Negative Set) (2 cycles)
    LDA $2E                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BEQ $A7F                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    BMI $A7C                             ; BMI - Branch if Minus (Negative Set) (2 cycles)
    BRL $1109C                           ; BRL - Branch Always Long (4 cycles)
function_10A7C:
    BRL $10FC1           ; BRL - Branch Always Long (4 cycles)
function_10A7F:
    BRL $10D11           ; BRL - Branch Always Long (4 cycles)
function_10A82:
    LDA $2E              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BEQ $A8E                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    BMI $A8B                             ; BMI - Branch if Minus (Negative Set) (2 cycles)
    BRL $10AB5                           ; BRL - Branch Always Long (4 cycles)
function_10A8B:
    BRL $10BC4           ; BRL - Branch Always Long (4 cycles)
function_10A8E:
    RTS                  ; RTS - Return from Subroutine (6 cycles)
function_10A8F:
    LDA $2E              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    BEQ $A9B                             ; BEQ - Branch if Equal (Zero Set) (2 cycles)
    BMI $A98                             ; BMI - Branch if Minus (Negative Set) (2 cycles)
    BRL $10E21                           ; BRL - Branch Always Long (4 cycles)
function_10A98:
    BRL $10EF1           ; BRL - Branch Always Long (4 cycles)
function_10A9B:
    BRL $10BF9           ; BRL - Branch Always Long (4 cycles)
function_10A9E:
    LDA $68              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    LDA $67                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    JSR $9AA1                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $AAC                             ; BCC - Branch if Carry Clear (2 cycles)
    LDA #$01                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10AAC:
    JSR $9AD3            ; JSR - Jump to Subroutine (6 cycles)
    JSR $9C37                            ; JSR - Jump to Subroutine (6 cycles)
    LDA #$00                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
loc_10AB5:
    STZ $2F                   ; STZ - Store Zero in Memory (3 cycles)
    STZ $31                              ; STZ - Store Zero in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$40                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10ADB:
    BCC $AE4            ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
loc_10AE4:
    REP #$20                  ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $B02                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $B4D                             ; BCS - Branch if Carry Set (2 cycles)
    JSR $9C5C                            ; JSR - Jump to Subroutine (6 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10B02:
    BNE $B13             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $B1A                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10B1A:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$FFF0                           ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $64                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $B2D                             ; BCC - Branch if Carry Clear (2 cycles)
    BRA $B7E                             ; BRA - Branch Always (3 cycles)
function_10B2D:
    BNE $B13             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $B4A                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10B4A:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
function_10B4D:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$10                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $30                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $64                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $B6A                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10B67:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
function_10B6A:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10B7A:
    BCC $B67            ; BCC - Branch if Carry Clear (2 cycles)
leveldata_10B7C:
    BRA $BA3            ; BRA - Branch Always (3 cycles)
leveldata_10B7E:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $66                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC $2E                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $BA0                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10BA0:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
leveldata_10BA3:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
leveldata_10BA5:
    LDA $66             ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
leveldata_10BA7:
    SEC                 ; SEC - Set Carry Flag (2 cycles) [C]
    SBC $2E                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $BC1                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10BC1:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
loc_10BC4:
    LDA #$FF                  ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2F                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $31                              ; STZ - Store Zero in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$40                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $BF6                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10BF6:
    BRL $10AE4           ; BRL - Branch Always Long (4 cycles)
loc_10BF9:
    LDA #$FF                  ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $31                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $2F                              ; STZ - Store Zero in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $C25                             ; BCC - Branch if Carry Clear (2 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $31                              ; STZ - Store Zero in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10C25:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $C46                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $C92                             ; BCS - Branch if Carry Set (2 cycles)
    BRL $11C5C                           ; BRL - Branch Always Long (4 cycles)
function_10C46:
    BNE $C57             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $C5E                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10C5E:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$10                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $62                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $C75                             ; BCC - Branch if Carry Clear (2 cycles)
    BRA $CC8                             ; BRA - Branch Always (3 cycles)
function_10C75:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $C8F                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10C8F:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
function_10C92:
    BNE $C57             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$FFF0                           ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $62                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $CAA                             ; BCC - Branch if Carry Clear (2 cycles)
    BRA $CEC                             ; BRA - Branch Always (3 cycles)
function_10CAA:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $CC5                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10CC5:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
leveldata_10CC8:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $68                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC $30                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $CE9                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10CE9:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
leveldata_10CEC:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $68                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC $30                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $D0E                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10D0E:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
loc_10D11:
    STZ $31                   ; STZ - Store Zero in Memory (3 cycles)
    STZ $2F                              ; STZ - Store Zero in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $D35                             ; BCC - Branch if Carry Clear (2 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10D35:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $D56                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $DA2                             ; BCS - Branch if Carry Set (2 cycles)
    BRL $11C5C                           ; BRL - Branch Always Long (4 cycles)
function_10D56:
    BNE $D67             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $D6E                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10D6E:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$10                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $62                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $D85                             ; BCC - Branch if Carry Clear (2 cycles)
    BRA $DD8                             ; BRA - Branch Always (3 cycles)
function_10D85:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $D9F                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10D9F:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
function_10DA2:
    BNE $D67             ; BNE - Branch if Not Equal (Zero Clear) (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA #$FFF0                           ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2E                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $62                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $DBA                             ; BCC - Branch if Carry Clear (2 cycles)
    BRA $DFC                             ; BRA - Branch Always (3 cycles)
function_10DBA:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $DD5                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10DD5:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
leveldata_10DD8:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $68                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC $30                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $DF9                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10DF9:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
leveldata_10DFC:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $68                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC $30                              ; SBC - Subtract with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $E1E                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10E1E:
    BRL $11C5C           ; BRL - Branch Always Long (4 cycles)
loc_10E21:
    LDA #$FF                  ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $31                              ; STA - Store Accumulator in Memory (3 cycles)
    STZ $2F                              ; STZ - Store Zero in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $E57                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10E57:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $E8B                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $EC7                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $EBE                             ; BCS - Branch if Carry Set (2 cycles)
    BRL $11C5C                           ; BRL - Branch Always Long (4 cycles)
function_10E8B:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $EC7                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10EB3:
    BCS $EBE            ; BCS - Branch if Carry Set (2 cycles)
leveldata_10EB5:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10EBE:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    BRL $10BF9                           ; BRL - Branch Always Long (4 cycles)
function_10EC7:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10EDD:
    BCC $EE8            ; BCC - Branch if Carry Clear (2 cycles)
leveldata_10EDF:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10EE8:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    BRL $10AB5                           ; BRL - Branch Always Long (4 cycles)
loc_10EF1:
    LDA #$FF                  ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $31                              ; STA - Store Accumulator in Memory (3 cycles)
    STA $2F                              ; STA - Store Accumulator in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $F28                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10F28:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $F5B                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $F96                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $F8D                             ; BCS - Branch if Carry Set (2 cycles)
    BRL $11C5C                           ; BRL - Branch Always Long (4 cycles)
function_10F5B:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC #$70                             ; ADC - Add with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $F96                             ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10F82:
    BCS $F8D            ; BCS - Branch if Carry Set (2 cycles)
leveldata_10F84:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10F8D:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    BRL $10BF9                           ; BRL - Branch Always Long (4 cycles)
function_10F96:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $64                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
leveldata_10FAD:
    BCC $FB8            ; BCC - Branch if Carry Clear (2 cycles)
leveldata_10FAF:
    REP #$20            ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10FB8:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    BRL $10BC4                           ; BRL - Branch Always Long (4 cycles)
loc_10FC1:
    STZ $31                   ; STZ - Store Zero in Memory (3 cycles)
    LDA #$FF                             ; LDA - Load Accumulator with Memory (2 cycles) [N,Z]
    STA $2F                              ; STA - Store Accumulator in Memory (3 cycles)
    LDX $0197                            ; LDX - Load Index X with Memory (4 cycles) [N,Z]
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $1800                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $62                              ; STA - Store Accumulator in Memory (3 cycles)
    SEC                                  ; SEC - Set Carry Flag (2 cycles) [C]
    SBC #$70                             ; SBC - Subtract with Carry (2 cycles) [N,V,Z,C]
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $2E                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $66                              ; STA - Store Accumulator in Memory (3 cycles)
    LDA $1880                            ; LDA - Load Accumulator with Memory (4 cycles) [N,Z]
    STA $64                              ; STA - Store Accumulator in Memory (3 cycles)
    CLC                                  ; CLC - Clear Carry Flag (2 cycles) [C]
    ADC $30                              ; ADC - Add with Carry (3 cycles) [N,V,Z,C]
    STA $68                              ; STA - Store Accumulator in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    JSR $9923                            ; JSR - Jump to Subroutine (6 cycles)
    BCC $FF4                             ; BCC - Branch if Carry Clear (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    STZ $30                              ; STZ - Store Zero in Memory (3 cycles)
    STZ $2E                              ; STZ - Store Zero in Memory (3 cycles)
    SEP #$20                             ; SEP - Set Processor Status Bits (3 cycles) [All]
    RTS                                  ; RTS - Return from Subroutine (6 cycles)
function_10FF4:
    REP #$20             ; REP - Reset Processor Status Bits (3 cycles) [All]
    JSR $8A9E                            ; JSR - Jump to Subroutine (6 cycles)
    BCS $102E                            ; BCS - Branch if Carry Set (2 cycles)
    REP #$20                             ; REP - Reset Processor Status Bits (3 cycles) [All]
    LDA $62                              ; LDA - Load Accumulator with Memory (3 cycles) [N,Z]